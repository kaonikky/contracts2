# –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ main.py
import streamlit as st
import pandas as pd
from datetime import datetime
import os
from utils import get_contract_status, sort_contracts, filter_contracts, check_inn_exists, get_contract_by_inn, get_org_info, log_contract_change, get_contract_history
from users import init_users, verify_user, add_user
import openpyxl

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏",
    page_icon="üìÑ",
    layout="wide"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'sort_column' not in st.session_state:
    st.session_state.sort_column = None
if 'sort_ascending' not in st.session_state:
    st.session_state.sort_ascending = True
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False
if 'user_role' not in st.session_state:
    st.session_state.user_role = None
if 'user_full_name' not in st.session_state:
    st.session_state.user_full_name = None
if 'org_name' not in st.session_state:
    st.session_state.org_name = None
if 'director' not in st.session_state:
    st.session_state.director = None
if 'address' not in st.session_state:
    st.session_state.address = None

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    if not os.path.exists('data/contracts.csv'):
        df = pd.DataFrame(columns=[
            'contract_id', 'name', 'director', 'address', 'inn', 
            'end_date', 'value', 'status', 'comments', 'lawyer'
        ])
        df.to_csv('data/contracts.csv', index=False)
        return df

    try:
        df = pd.read_csv('data/contracts.csv', dtype={
            'contract_id': str,
            'name': str,
            'director': str,
            'address': str,
            'inn': str,
            'value': float,
            'status': str,
            'comments': str,
            'lawyer': str
        })
        df['end_date'] = pd.to_datetime(df['end_date'], errors='coerce')

        for idx in df.index:
            status, emoji = get_contract_status(df.at[idx, 'end_date'])
            df.at[idx, 'status'] = f"{emoji} {status}"

        return df
    except pd.errors.EmptyDataError:
        return pd.DataFrame(columns=[
            'contract_id', 'name', 'director', 'address', 'inn', 
            'end_date', 'value', 'status', 'comments', 'lawyer'
        ])

# –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
def logout():
    st.session_state.authenticated = False
    st.session_state.user_role = None
    st.session_state.user_full_name = None
    st.rerun()

# –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
if not st.session_state.authenticated:
    st.title('üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É')

    with st.form("login_form"):
        username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")

        if submitted:
            success, role, full_name = verify_user(username, password)
            if success:
                st.session_state.authenticated = True
                st.session_state.user_role = role
                st.session_state.user_full_name = full_name
                st.rerun()
            else:
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

else:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    df = load_data()
    
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...
    # [–ü–æ–ª–Ω—ã–π –∫–æ–¥ main.py –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏]

init_users()
